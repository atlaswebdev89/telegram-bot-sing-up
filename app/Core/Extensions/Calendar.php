<?php

namespace App\Core\Extensions;

class Calendar
{
	public $di;
	public $hello = "Hello Calendar";
	public $defaultIcon = "‚òë";
	public $storage;
	public $table = "`telegram_table_free_slot_date_time`";
	public $checkIcon = "‚úÖ";
	public $checnIconDays = "üöñ";

	public function __construct($di)
	{
		$this->di = $di;
	}

	public function addStorage($storage)
	{
		$this->storage = $storage;
	}

	// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—Å–ª—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å

	protected function getSelectedTimeSlot($currentDate)
	{
		// –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î –ï—Å—Ç—å –ª–∏ —Éc—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
		$sql = "SELECT `slots` FROM  " . $this->table . " WHERE date =:date";
		$data_array = array(
			'date'      => $currentDate,
		);
		$result = $this->storage->query($sql, 'arraydata', $data_array);
		$arraySelectedSlots = ($result) ? json_decode($result[0]['slots'], true) : NULL;

		return $arraySelectedSlots;
	}
	// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ—Å—Ç—å –ª–∏ –¥–Ω–∏ —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
	protected function getSelectedDays($mount, $year)
	{
		// –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î –ï—Å—Ç—å –ª–∏ —Éc—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
		$sql = "SELECT * FROM  " . $this->table . " WHERE date LIKE :date";
		$data_array = array(
			'date'      => "%" . $mount . "-" . $year,
		);
		$result = $this->storage->query($sql, 'arraydata', $data_array);

		// –ü–æ–ª—É—á–∏–º –Ω–ª–º–µ—Ä–∞ –¥–Ω–µ–π –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
		if ($result) {
			$arraySelectedDayNumber = [];
			foreach ($result as $day) {
				$tempArr = explode("-", $day['date']);
				$arraySelectedDayNumber[] = (json_decode($day['slots'], true)) ? $tempArr[0] : NULL;
			}
			return $arraySelectedDayNumber;
		}
	}


	/**
	 * –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ —Å–ª–æ—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
	 * 
	 */
	public function changeButtonSlotTime($keyboads, $timeslot)
	{
		if ($keyboads) {
			foreach ($keyboads as  $slot) {
				foreach ($slot as  $s) {
					foreach ($s as  $t) {
						if ($t->text == $timeslot) {
							if ($pos = strpos($timeslot, $this->checkIcon)) {
								$t->text =  trim(substr($t->text, 0, $pos));
								$t->callback_data = trim(substr($t->callback_data, 0, strpos($t->callback_data, $this->checkIcon)));
							} else {
								$t->text = $timeslot . " " . $this->checkIcon;
								$t->callback_data = "slot_" . $timeslot . " " . $this->checkIcon;
							}
						}
					}
				}
			}
		}
		return $keyboads;
	}

	public function getNumDayOfWeek($date)
	{
		// –ø–æ–ª—É—á–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
		$day = $date->format("w");
		// –≤–µ—Ä–Ω–µ–º –Ω–∞ 1 –º–µ–Ω—å—à–µ [0 - –≤—Å–∫]
		return ($day == 0) ? 6 : $day - 1;
	}

	public function getDays($month, $year)
	{
		// —Å–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –Ω–∞ –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞
		$date = new \DateTime($year . "-" . $month . "-01");

		// –º–∞—Å—Å–∏–≤ –¥–Ω–µ–π
		$days = [];
		// –Ω–∞—á–∞–ª–æ –º–∞—Å—Å–∏–≤–∞
		$line = 0;

		$nameDays = [
			'–ü–Ω',
			'–í—Ç',
			'–°—Ä',
			'–ß—Ç',
			'–ü–Ω',
			'–°–±',
			'–í—Å',
		];
		// –ó–∞–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ 
		foreach ($nameDays as $name) {
			$days[$line][] = $name;
		}
		$line++;
		// –∑–∞–ø–æ–ª–Ω–∏–º –Ω–∞—á–∞–ª–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
		for ($i = 0; $i < $this->getNumDayOfWeek($date); $i++) {
			$days[$line][] = "-";
		}

		// –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –¥–Ω–∏ –ø–æ–∫–∞ –º–µ—Å—è—Ü —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º
		while ($date->format("m") == $month) {
			// –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É –¥–Ω–∏
			$days[$line][] = $date->format("d");
			// –≤—Å, –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å - –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏
			if ($this->getNumDayOfWeek($date) % 7 == 6) {
				// –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
				$line += 1;
			}
			// –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
			$date->modify('+1 day');
		}

		// –¥–æ–∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
		if ($this->getNumDayOfWeek($date) != 0) {
			for ($i = $this->getNumDayOfWeek($date); $i < 7; $i++) {
				$days[$line][] = "-";
			}
		}
		// –≤–µ—Ä–Ω–µ–º –º–∞—Å—Å–∏–≤ –¥–Ω–µ–π
		return $days;
	}

	public function viewCal($month, $year,  $cbq_id = null, $message_id = null)
	{
		// –ø–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
		$dayLines = $this->getDays($month, $year);
		// –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é –¥–∞—Ç—É
		$current = new \DateTime($year . "-" . $month . "-01");
		// –æ–ø—Ä–µ–¥–µ–ª–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
		$current_info = $current->format("m-Y");


		// –æ–ø—Ä–µ–¥–µ–ª–∏–º –∫–Ω–æ–ø–∫–∏
		$buttons = [];
		// –ø–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ —ç—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
		$buttons[] = [
			[
				"text" => "<<<",
				"callback_data" => "month_" . date("m_Y", strtotime('-1 month', $current->getTimestamp()))
			],
			[
				"text" => $current_info,
				"callback_data" => "monthInfo_" . $current_info
			],
			[
				"text" => ">>>",
				"callback_data" => "month_" . date("m_Y", strtotime('+1 month', $current->getTimestamp()))
			]
		];
		$selectDays = $this->getSelectedDays($month, $year);
		// –≤—ã–≤–æ–¥–∏–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
		foreach ($dayLines as $line => $days) {
			// –ø–µ—Ä–µ–±–µ—Ä–µ–º –ª–∏–Ω–∏—é
			foreach ($days as $day) {
				// –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –≤ –ª–∏–Ω–∏—é
				$buttons[$line + 1][] = [
					// –≤—ã–≤–µ–¥–µ–º –¥–µ–Ω—å
					"text" => ($selectDays && in_array($day, $selectDays))
						? $day . " " . $this->checnIconDays
						: $day,
					// –ø–æ—Ä–µ–¥–µ–ª–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
					"callback_data" => ($day > 0 && is_numeric($day))
						// –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–Ω—å
						? "day_" . $day . "-" . $current_info
						// –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
						: "inline"
				];
			}
		}
		// –≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ
		$data = [
			"text" => "<b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å:</b>\n\n" . $current->format("F Y"),
			"parse_mode" => "html",
			"button" => json_encode(['inline_keyboard' => $buttons])
		];
		if (!is_null($message_id)) {
			$data["message_id"] = $message_id;
		}
		return $data;
	}

	public function viewSlotTime($message_id, $currentDate)
	{
		$slots = [
			'08:00-09:00',
			'09:00-10:00',
			'10:00-11:00',
			'11:00-12:00',
			'13:00-14:00',
			'15:00-16:00',
			'17:00-18:00',
			'19:00-20:00',
		];

		// –æ–ø—Ä–µ–¥–µ–ª–∏–º –∫–Ω–æ–ø–∫–∏
		$buttons = [];
		// –ø–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫ —ç—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
		// –≤—ã–≤–æ–¥–∏–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
		$index = 0;
		foreach ($slots as $line => $slot) {
			// –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫—É –≤ –ª–∏–Ω–∏—é
			if ($line != 0 && $line % 2 == 0) {
				$index = $index + 1;
			}

			if ($this->getSelectedTimeSlot($currentDate) && in_array($slot, $this->getSelectedTimeSlot($currentDate))) {
				$slot = ($this->checkIcon) ? $slot . " " . $this->checkIcon : $slot . " +1";
			}

			$buttons[$index][] = [
				// –≤—ã–≤–µ–¥–µ–º –¥–µ–Ω—å
				"text" => $slot,
				// –ø–æ—Ä–µ–¥–µ–ª–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
				"callback_data" => "slot_" . $slot,
			];
		}

		$buttons[] = [
			[
				// –≤—ã–≤–µ–¥–µ–º –¥–µ–Ω—å
				"text" => "–ì–æ—Ç–æ–≤–æ",
				// –ø–æ—Ä–µ–¥–µ–ª–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
				"callback_data" => "done",
			],
			[
				// –≤—ã–≤–µ–¥–µ–º –¥–µ–Ω—å
				"text" => "–ù–∞–∑–∞–¥",
				// –ø–æ—Ä–µ–¥–µ–ª–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
				"callback_data" => "back",
			],

		];
		// –≥–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ
		$data = [
			"text" => "–°–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:\n" . $currentDate,
			"parse_mode" => "html",
			"button" => json_encode(['inline_keyboard' => $buttons])
		];
		if (!is_null($message_id)) {
			$data["message_id"] = $message_id;
		}
		return $data;
	}
}
